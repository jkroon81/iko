#
# Iko - Copyright (C) 2011 Jacob Kroon
#
# Contributor(s):
#   Jacob Kroon <jacob.kroon@gmail.com>
#

public function mpe_cont(u, x, R, K) {
	if(u == 0)
		return 0;

	if(gpe_is_monomial(u, x)) {
		c = gpe_lc(u, x);
		return mpe_normalize(c, R, K);
	} else if(gpe_is_polynomial(u, x)) {
		r = 0;
		m = gpe_degree(u, x);
		for(n = 0 to m) {
			c = gpe_coefficient(u, x, n);
			r = mpe_gcd(c, r, R, K);
		}
		return r;
	} else
		return Undefined;
}

public function mpe_cont_sr(u, x, R, K) {
	if(u == 0)
		return 0;

	if(gpe_is_monomial(u, x)) {
		c = gpe_lc(u, x);
		return mpe_normalize(c, R, K);
	} else if(gpe_is_polynomial(u, x)) {
		r = 0;
		m = gpe_degree(u, x);
		for(n = 0 to m) {
			c = gpe_coefficient(u, x, n);
			r = mpe_gcd_sr(c, r, R, K);
		}
		return r;
	} else
		return Undefined;
}

public function mpe_division_mb(u, v, L) {
	q = 0;
	r = u;
	v_l = mpe_lm(v, L);
	f = mpe_G(r, v_l);
	while(f <> 0) {
		q += f;
		r = expand(r - f * v);
		f = mpe_G(r, v_l);
	}
	return [q, r];
}

public function mpe_division_pseudo(u, v, x) {
	p = 0;
	s = u;
	m = gpe_degree(s, x);
	n = gpe_degree(v, x);
	d = max( { m - n + 1, 0 } );
	lcv = gpe_coefficient(v, x, n);
	k = 0;
	while( m >= n ) {
		lcs = gpe_coefficient(s, x, m);
		p = lcv * p + lcs * x^(m - n);
		s = expand(lcv * s - lcs * v * x^(m - n));
		k += 1;
		m = gpe_degree(s, x);
	}
	return [ expand(lcv^(d - k) * p), expand(lcv^(d - k) * s) ];
}

public function mpe_division_rec(u, v, L, K) {
	if(L == []) {
		if(sname(K) == "Z") {
			if( u / v is integer)
				return [ u / v, 0 ];
			else
				return [ 0, u ];
		} else if(sname(K) == "Q")
			return [ u / v, 0 ];
		else
			error "K must be either 'Z' or 'Q'";
	} else {
		x = L[1];
		r = u;
		m = gpe_degree(r, x);
		n = gpe_degree(v, x);
		q = 0;
		lcv = gpe_lc(v, x);
		while(m >= n) {
			lcr = gpe_lc(r, x);
			d = mpe_division_rec(lcr, lcv, rest(L), K);
			if(d[2] <> 0)
				return [expand(q), r];
			else {
				c = d[1];
				q += c*x^(m - n);
				r = expand(r - c*v*x^(m-n));
				m = gpe_degree(r, x);
			}
		}
		return [expand(q), r];
	}
}

public function mpe_expansion(u, v, L, t) {
	if(u == 0)
		return 0;
	else {
		d = mpe_division_mb(u, v, L);
		q = d[1];
		r = d[2];
		return expand(t * mpe_expansion(q, v, L, t) + r);
	}
}

public function mpe_gcd(u, v, L, K) {
	if(u == 0)
		return mpe_normalize(v, L, K);
	else if(v == 0)
		return mpe_normalize(u, L, K);
	else return mpe_normalize(mpe_gcd_rec(u, v, L, K), L, K);
}

function mpe_gcd_rec(u, v, L, K) {
	if(L == []) {
		if(sname(K) == "Z")
			return i_gcd(u, v);
		else if(sname(K) == "Q")
			return 1;
		else
			error "'K' must be either 'Q' or 'Z'";
	} else {
		x = L[1];
		R = rest(L);
		cont_u = mpe_cont(u, x, R, K);
		cont_v = mpe_cont(v, x, R, K);
		d = mpe_gcd_rec(cont_u, cont_v, R, K);
		pp_u = mpe_division_rec(u, cont_u, L, K)[1];
		pp_v = mpe_division_rec(v, cont_v, L, K)[1];
		while(pp_v <> 0) {
			r = mpe_division_pseudo(pp_u, pp_v, x)[2];
			if(r == 0)
				pp_r = 0;
			else {
				cont_r = mpe_cont(r, x, R, K);
				pp_r = mpe_division_rec(r, cont_r, L, K)[1];
			}
			pp_u = pp_v;
			pp_v = pp_r;
		}
		return expand(d * pp_u);
	}
}

function mpe_gcd_rec_sr(u, v, L, K) {
	if(L == []) {
		if(sname(K) == "Z")
			return i_gcd(u, v);
		else if(sname(K) == "Q")
			return 1;
		else
			error "'K' must be either 'Q' or 'Z'";
	} else {
		sigma = 0;
		beta = 0;
		phi = 0;
		x = L[1];
		R = rest(L);
		if(gpe_degree(u, x) >= gpe_degree(v, x)) {
			U = u;
			V = v;
		} else {
			U = v;
			V = u;
		}
		cont_U = mpe_cont_sr(U, x, R, K);
		cont_V = mpe_cont_sr(V, x, R, K);
		d = mpe_gcd_rec_sr(cont_U, cont_V, R, K);
		U = mpe_division_rec(U, cont_U, L, K)[1];
		V = mpe_division_rec(V, cont_V, L, K)[1];
		g = mpe_gcd_rec_sr(gpe_lc(U, x), gpe_lc(V, x), R, K);
		i = 1;
		while(V <> 0) {
			r = mpe_division_pseudo(U, V, x)[2];
			if(r <> 0) {
				if(i == 1) {
					sigma = gpe_degree(U, x) - gpe_degree(V, x) + 1;
					phi = -1;
					beta = (-1)^sigma;
				} else if(i > 1) {
					sigmap = sigma;
					sigma = gpe_degree(U, x) - gpe_degree(V, x) + 1;
					f = gpe_lc(U, x);
					phi = mpe_division_rec(expand((-f)^(sigmap - 1)), expand(phi^(sigmap - 2)), R, K)[1];
					beta = expand(-f * phi^(sigma - 1));
				}
				U = V;
				V = mpe_division_rec(r, beta, L, K)[1];
				i += 1;
			} else if(r == 0) {
				U = V;
				V = r;
			}
		}
		s = mpe_division_rec(gpe_lc(U, x), g, R, K)[1];
		W = mpe_division_rec(U, s, L, K)[1];
		cont_W = mpe_cont_sr(W, x, R, K);
		pp_W = mpe_division_rec(W, cont_W, L, K)[1];
		return expand(d * pp_W);
	}
}

public function mpe_gcd_sr(u, v, L, K) {
	if(u == 0)
		return mpe_normalize(v, L, K);
	else if(v == 0)
		return mpe_normalize(u, L, K);
	else return mpe_normalize(mpe_gcd_rec_sr(u, v, L, K), L, K);
}

function mpe_G(u, v) {
	if(u is sum) {
		r = 0;
		foreach(t in u) {
			p = t / v;
			if(gpe_is_polynomial(p, variables(p)))
				r += p;
		}
		return r;
	} else {
		p = u / v;
		if(gpe_is_polynomial(p, variables(p)))
			return p;
		else
			return 0;
	}
}

public function mpe_lm(u, L) {
	if(L == [])
		return u;
	else {
		x = L[1];
		m = gpe_degree(u, x);
		c = gpe_coefficient(u, x, m);
		return x^m * mpe_lm(c, rest(L));
	}
}

function mpe_normalize(u, L, K) {
	if(L == []) {
		if(sname(K) == "Z")
			return i_abs(u);
		else if(sname(K) == "Q")
			return 1;
		else
			error "'K' must be either 'Z' or 'Q'";
	} else {
		x = L[1];
		R = rest(L);
		m = gpe_degree(u, x);
		c = gpe_coefficient(u, x, m);
		n = mpe_normalize(c, R, K);
		return expand(u * mpe_division_rec(n, c, R, K)[1]);
	}
}
