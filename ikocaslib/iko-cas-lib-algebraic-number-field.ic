#
# Iko - Copyright (C) 2011 Jacob Kroon
#
# Contributor(s):
#   Jacob Kroon <jacob.kroon@gmail.com>
#

function alg_divide(u, v, p, a) {
	w = alg_mult_inverse(v, p, a);
	return gpe_division(expand(u * w), p, a)[2];
}

public function alg_division(u, v, x, p, a) {
	q = 0;
	r = u;
	m = gpe_degree(r, x);
	n = gpe_degree(v, x);
	lcv = gpe_lc(v, x);
	while(m >= n) {
		lcr = gpe_lc(r, x);
		s = alg_divide(lcr, lcv, p, a);
		q += s * x^(m-n);
		r = expand((r - lcr * x^m) - (v - lcv * x^n) * s * x^(m - n));
		r = alg_simplify_coefficients(r, x, p, a);
		m = gpe_degree(r, x);
	}
	return [q, r];
}

public function alg_gcd(u, v, x, p, a) {
	U = u;
	V = v;
	while(V <> 0) {
		R = alg_division(U, V, x, p, a)[2];
		U = V;
		V = R;
	}
	return alg_monic(U, x, p, a);
}

function alg_monic(u, x, p, a) {
	if(u == 0)
		return 0;
	r = 0;
	lc = gpe_lc(u, x);
	m = gpe_degree(u, x);
	for(j = 0 to m) {
		c = alg_divide(gpe_coefficient(u, x, j), lc, p, a);
		r += gpe_division(c, p, a)[2] * x^j;
	}
	return r;
}

function alg_mult_inverse(v, p, a) {
	return gpe_ext_euc_alg(v, p, a)[2];
}

function alg_simplify_coefficients(u, x, p, a) {
	if(u == 0)
		return 0;
	r = 0;
	m = gpe_degree(u, x);
	for(j = 0 to m) {
		c = gpe_coefficient(u, x, j);
		r += gpe_division(c, p, a)[2] * x^j;
	}
	return r;
}
