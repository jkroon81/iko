#
# Iko - Copyright (C) 2011 Jacob Kroon
#
# Contributor(s):
#   Jacob Kroon <jacob.kroon@gmail.com>
#

function gpe_coefficient(u, x, j) {
	if(!gpe_is_polynomial(u, x))
		return Undefined;

	if(u is sum) {
		r = 0;
		foreach(t in u) {
			c = t / x^j;
			if(free_of(c, x))
				r += c;
		}
		return r;
	} else {
		r = u / x^j;
		if(free_of(r, x))
			return r;
		else
			return 0;
	}
}

function gpe_degree(u, v) {
	return gpe_degree_polynomial(u, v);
}

function gpe_degree_monomial(u, v) {
	if(v is set)
		S = v;
	else
		S = { v };

	if(!gpe_is_monomial(u, S))
		return Undefined;

	if(u == 0)
		return -Infinity;

	if(set_member(u, S))
		return 1;
	else if(u is power) {
		if(set_member(u[1], S))
			return u[2];
		else
			return 0;
	} else if(u is product) {
		r = 0;
		foreach(f in u)
			r += gpe_degree_monomial(f, S);
		return r;
	} else
		return 0;
}

function gpe_degree_polynomial(u, v) {
	if(v is set)
		S = v;
	else
		S = { v };

	if(!gpe_is_polynomial(u, S))
		return Undefined;

	if(u is sum) {
		r = 0;
		foreach(t in u) {
			d = gpe_degree_monomial(t, S);
			if(d > r)
				r = d;
		}
		return r;
	} else
		return gpe_degree_monomial(u, S);
}

public function gpe_division(u, v, x) {
	if(!gpe_is_polynomial(u,x) || !gpe_is_polynomial(v,x))
		return Undefined;

	q = 0;
	r = u;
	m = gpe_degree(r, x);
	n = gpe_degree(v, x);
	lcv = gpe_lc(v, x);

	while(m >= n) {
		lcr = gpe_lc(r, x);
		s = lcr / lcv;
		q += s * x^(m - n);
		r = expand((r - lcr * x^m) - (v - lcv * x^n) * s * x^(m - n));
		m = gpe_degree(r, x);
	}

	return [q, r];
}

public function gpe_expansion(u, v, x, t) {
	if(u == 0)
		return 0;
	else {
		d = gpe_division(u, v, x);
		q = d[1];
		r = d[2];
		return (expand(t * gpe_expansion(q, v, x, t) + r));
	}
}

public function gpe_ext_euc_alg(u, v, x) {
	if(u == 0 && v == 0)
		return [0, 0, 0];
	else {
		U = u;
		V = v;
		App = 1;
		Ap = 0;
		Bpp = 0;
		Bp = 1;
		while(V <> 0) {
			d = gpe_division(U, V, x);
			q = d[1];
			r = d[2];
			A = App - q * Ap;
			B = Bpp - q * Bp;
			App = Ap;
			Ap = A;
			Bpp = Bp;
			Bp = B;
			U = V;
			V = r;
		}
		c = gpe_lc(U, x);
		App = expand(App / c);
		Bpp = expand(Bpp / c);
		U = expand(U / c);
		return [U, App, Bpp];
	}
}

public function gpe_gcd(u, v, x) {
	if(u == 0 && v == 0)
		return 0;
	else {
		U = u;
		V = v;
		while(V <> 0) {
			d = gpe_division(U, V, x);
			U = V;
			V = d[2];
		}
		return expand(1 / gpe_lc(U, x) * U);
	}
}

function gpe_is_monomial(u, v) {
	if(v is set)
		S = v;
	else
		S = { v };

	if(set_member(u, S))
		return true;
	else if(u is power) {
		radix = u[1];
		exp = u[2];
		if(set_member(radix, S ) && exp is integer && exp > 1)
			return true;
	} else if(u is product) {
		foreach(f in u)
			if(!gpe_is_monomial(f, S))
				return false;
		return true;
	}
	return free_of(u, S);
}

function gpe_is_polynomial(u, v) {
	if(v is set)
		S = v;
	else
		S = { v };

	if(u is sum) {
		if(set_member(u, S))
			return true;
		foreach(t in u)
			if(!gpe_is_monomial(t, S))
				return false;
		return true;
	} else
		return gpe_is_monomial(u, S);
}

function gpe_lc(u, x) {
	return gpe_coefficient(u, x, gpe_degree(u, x));
}

public function gpe_partial_fraction(u, v, x) {
	if(!(v is product))
		return u / v;
	else {
		f = v[1];
		r = v / f;
		if(free_of(f, x))
			return 1 / f * gpe_partial_fraction(u, r, x);
		else {
			s = gpe_partial_fraction_binary(u, expand(f), expand(r), x);
			u1 = s[1];
			w = s[2];
			return u1 / f + gpe_partial_fraction(w, r, x);
		}
	}
}

function gpe_partial_fraction_binary(u, v1, v2, x) {
	s = gpe_ext_euc_alg(v1, v2, x);
	A = s[2];
	B = s[3];
	u1 = gpe_division(expand(B * u), v1, x)[2];
	u2 = gpe_division(expand(A * u), v2, x)[2];
	return [u1, u2];
}
