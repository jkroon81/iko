public function expand(u) {
	if(u is sum) {
		v = u[1];
		return expand(v) + expand(u - v);
	} else if(u is product) {
		v = u[1];
		return expand_product(expand(v), expand(u / v));
	} else if(u is power) {
		radix = u[1];
		exp = u[2];
		if(exp is integer && exp >= 2)
			return expand_power(expand(radix), exp);
	}
	return u;
}

function expand_power(u, n) {
	if(u is sum) {
		f = u[1];
		r = u - f;
		s = 0;
		for(k = 0 to n) {
			c = n! / (k! * (n - k)!);
			s += expand_product(c * f^(n - k), expand_power(r, k));
		}
		return s;
	} else
		return u^n;
}

function expand_product(r, s) {
	if(r is sum) {
		f = r[1];
		return expand_product(f, s) + expand_product(r - f, s);
	} else if(s is sum) {
		return expand_product(s, r);
	} else
		return r * s;
}

public function free_of(u, t) {
	vala {
		if(t.kind == Kind.SET) {
			foreach(var e in t as CompoundExpression)
				if(!(free_of(u, e) as Boolean).bval)
					return bool_false();
			return bool_true();
		} else {
			if(u.to_polish() == t.to_polish())
				return bool_false();
			else if(u.kind == Kind.SYMBOL ||
			        u.kind == Kind.INTEGER ||
			        u.kind == Kind.FRACTION)
				return bool_true();
			else {
				var ce = u as CompoundExpression;
				foreach(var e in ce)
					if(!(free_of(e, t) as Boolean).bval)
						return bool_false();
			}
			return bool_true();
		}
	}
}

public function simplify(e) {
	vala {
		var x = e;
		if(x is CompoundExpression)
			x = new Symbol("simplify").map(x, null);

		switch(x.kind) {
		case Kind.BOOLEAN:
		case Kind.INTEGER:
		case Kind.LIST:
		case Kind.SYMBOL:
		case Kind.UNDEFINED:
			return x;
		case Kind.AND:
		case Kind.EQ:
		case Kind.GE:
		case Kind.GT:
		case Kind.LE:
		case Kind.LT:
		case Kind.NE:
		case Kind.NOT:
		case Kind.OR:
			return b_simplify(x);
		case Kind.FACTORIAL:
		case Kind.MUL:
		case Kind.PLUS:
		case Kind.POWER:
			return bae_simplify(x);
		case Kind.FRACTION:
			return rne_simplify(x);
		case Kind.FUNCTION:
			return simplify_function_call(x);
		case Kind.SET:
			return set_simplify(x);
		default:
			throw new Error.INTERNAL(
				"%s: Kind '%s' not handled\n",
				Log.METHOD,
				x.kind.to_string()
			);
		}
	}
}

function simplify_function_call(e) {
	vala {
		if(e.kind != Kind.FUNCTION)
			return e;

		var fc = e as CompoundExpression;

		foreach(var arg in fc)
			if(arg is Undefined)
				return arg;

		return simplify((fc[0] as Symbol).invoke(fc.to_list().tail()));
	}
}

public function subs(e, u, v) {
	vala {
		if(e is CompoundExpression) {
			var r = new CompoundExpression.from_empty(e.kind);
			foreach(var op in e as CompoundExpression)
				r.append(subs(op, u, v));
			return r;
		} else if(e is Symbol) {
			if(u is Symbol && (e as Symbol).name == (u as Symbol).name)
				return v;
			else
				return e;
		} else if(e is Integer)
			return e;
		else
			throw new Error.INTERNAL("%s: Unhandled kind '%s'", Log.METHOD, e.kind.to_string());
	}
}
